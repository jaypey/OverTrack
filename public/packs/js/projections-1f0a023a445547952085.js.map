{"version":3,"file":"js/projections-1f0a023a445547952085.js","sources":["webpack://ontrack/./app/javascript/components/projections/Main.jsx","webpack://ontrack/./app/javascript/components/projections/ProjectionsChart.jsx","webpack://ontrack/./app/javascript/packs/projections.jsx"],"sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\nimport ExpenseFormModal from '../expenses/FormModal';\r\nimport { Categories, Revenues, Expenses, Goals, Reports } from '../../api/main';\r\nimport { Alerts } from '../../helpers/main';\r\nimport ProjectionsChart from './ProjectionsChart';\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      categories: [],\r\n      expenses: [],\r\n      expensesWithPredictions: [],\r\n      sumExpenses: 0,\r\n      revenues: [],\r\n      sumRevenues: 0,\r\n      loaded: false,\r\n      monthlyGoal: 0,\r\n      showExpenseCreateModal: false,\r\n      data: [],\r\n      labels: [],\r\n      colors: [],\r\n      count: 3,\r\n      project: 3,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.reloadData();\r\n  }\r\n\r\n  openExpenseCreate = () => { this.setState({ showExpenseCreateModal: true }); }\r\n  closeExpenseCreate = () => { this.setState({ showExpenseCreateModal: false }); }\r\n  onExpenseSave = () => {\r\n    this.closeExpenseCreate();\r\n    this.reloadData();\r\n  }\r\n\r\n  reloadData = () => {\r\n    this.loadCategory();\r\n    this.loadExpensesData();\r\n    this.loadRevenueData();\r\n    this.loadPieChartData(moment().format('MMMM YYYY'));\r\n  }\r\n\r\n  loadCategory = () => {\r\n    Categories.list().then(\r\n      (cResp) => { this.setState({ categories: cResp }); },\r\n      () => { Alerts.error(\"Categories didn't load correctly\"); }\r\n    );\r\n  }\r\n\r\n  loadExpensesData = () => {\r\n    Expenses.list().then(\r\n      (eResp) => {\r\n        this.setState({ expenses: eResp });\r\n        Goals.list().then(\r\n          (gResp) => { this.setState({ loaded: true, monthlyGoal: gResp.monthly }); },\r\n          () => { Alerts.error(\"Goal of expenses didn't load!\"); },\r\n        );\r\n      },\r\n      () => { Alerts.error(\"Expenses didn't load correctly!\"); },\r\n    );\r\n  }\r\n\r\n  categoriesWithExpensesAndSpend() {\r\n    const categories = [];\r\n    this.state.categories.forEach((category) => {\r\n      category.expenses = this.state.expenses.filter((expense) => expense.category_id == category.id);\r\n      category.spend = category.expenses.reduce((sum, exp) => sum + exp.amount, 0);\r\n      categories.push(category);\r\n    });\r\n    return categories;\r\n  }\r\n\r\n  renderExpenseCreateModal() {\r\n    if (!this.state.showExpenseCreateModal) { return ''; }\r\n    return <ExpenseFormModal categories={this.state.categories} onClose={this.closeExpenseCreate} onSave={this.onExpenseSave} />;\r\n  }\r\n\r\n  loadRevenueData = () => {\r\n    Revenues.list({ paid_after: moment().startOf('month').unix() }).then(\r\n      (rResp) => {\r\n        this.setState({ revenues: rResp});\r\n      },\r\n      () => { Alerts.error(\"Revenues didn't load correctly!\") }\r\n    );\r\n  }\r\n\r\n  loadSum = () => {\r\n    var indexRev = 0;\r\n\r\n    this.state.categories.forEach((category) => {\r\n      if (category.is_revenue == 1) {\r\n        category.revenues = this.state.revenues.filter((revenue) => revenue.category_id == category.id);\r\n        category.revenues.forEach((revenue) => {\r\n          indexRev += revenue.amount;\r\n        });\r\n      }\r\n    });\r\n\r\n    return (indexRev/100);\r\n  }\r\n\r\n  loadPieChartData = (month) => {\r\n    Reports.month({ month }).then(\r\n      (resp) => {\r\n\r\n        const revenue = this.loadSum();\r\n        \r\n        const data = resp.category_pourcentage.map((r) => \r\n          Number.parseFloat((r.spend/revenue)*100).toFixed(3)\r\n        )\r\n        const labels = resp.category_pourcentage.map((r) => r.category)\r\n        const colors = resp.category_pourcentage.map((r) => r.color)\r\n\r\n        this.setState({ data: data });\r\n        this.setState({ labels: labels });\r\n        this.setState({ colors: colors });\r\n\r\n        return true;\r\n      },\r\n      () => { Alerts.error(\"The data for the pie chart didn't load correctly!\") }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    var currentTime = new Date();\r\n    var thisYear = currentTime.getFullYear().toString();\r\n    var lastYear = (currentTime.getFullYear() - 1).toString();\r\n    var nextYear = (currentTime.getFullYear() + 1).toString();\r\n\r\n    const monthNames = [\"January \" + thisYear, \"February \" + thisYear,\"March \" + thisYear, \"April \" + thisYear,\r\n    \"May \" + thisYear, \"June \" + thisYear, \"July \" + thisYear, \"August \" + thisYear,\r\n    \"September \" + thisYear, \"October \" + thisYear, \"November \"  + thisYear, \"December \" + thisYear,\r\n    \"January \"  + nextYear, \"February \"  + nextYear, \"March \"  + nextYear, \"April \"  + nextYear,\r\n    \"May \"  + nextYear, \"June \"  + nextYear, \"July \"  + nextYear, \"August \"  + nextYear,\r\n     \"September \"  + nextYear, \"October \"  + nextYear, \"November \"  + nextYear, \"December \"  + nextYear\r\n      ];\r\n      monthNames[-1] = \"December \"  + lastYear\r\n      monthNames[-2] = \"November \" + lastYear\r\n      monthNames[-3] = \"October \" + lastYear\r\n      monthNames[-4] = \"September \" + lastYear\r\n      monthNames[-5] = \"August \" + lastYear\r\n      monthNames[-6] = \"July \" + lastYear\r\n      monthNames[-7] = \"June \" + lastYear\r\n      monthNames[-8] = \"May \" + lastYear\r\n      monthNames[-9] = \"April \" + lastYear\r\n      monthNames[-10] = \"March \" + lastYear\r\n      monthNames[-11] = \"February \" + lastYear\r\n      monthNames[-12] = \"January \" + lastYear\r\n    if (!this.state.loaded) { return ''; }\r\n    return (\r\n      <div className='container'>\r\n        <h2>Personalise your projections</h2>\r\n        <br></br>\r\n        <br></br>\r\n        <div className='month-container'>\r\n          <div className='previous-months'>{monthNames[currentTime.getMonth() - this.state.count - 1]} - {monthNames[currentTime.getMonth() - 1]}</div>\r\n          <div className='upcoming-months'>{monthNames[currentTime.getMonth()]} - {monthNames[currentTime.getMonth() + this.state.project]}</div>\r\n        </div>\r\n        <br></br>\r\n        <button className='btn button-width-left more-button' onClick={() => this.setState({ count: Math.min(12, Math.max(this.state.count + 1, 3)) })}>\r\n          + previous months\r\n        </button>\r\n        <button className='btn button-width-right more-button' onClick={() => this.setState({ project: Math.min(12, Math.max(this.state.project + 1, 3)) })}>\r\n          + upcoming months\r\n        </button>\r\n        <br></br>\r\n        <br></br>\r\n        <button className='btn button-width-left less-button' onClick={() => this.setState({ count: Math.min(12, Math.max(this.state.count - 1, 3)) })}>\r\n          - previous months\r\n        </button>\r\n        <button className='btn button-width-right less-button' onClick={() => this.setState({ project: Math.min(12, Math.max(this.state.project - 1, 3)) })}>\r\n          - upcoming months\r\n        </button>\r\n        <br></br>\r\n        <br></br>\r\n        <br></br>\r\n      {<ProjectionsChart studiedMonths={this.state.count} projectedMonths={this.state.project} categoriesWithExpensesAndSpend={this.categoriesWithExpensesAndSpend()} expenses={this.state.expenses} revenues={this.state.revenues} /> }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport { Numerics } from '../../helpers/main';\r\nimport Progress from '../shared/Progress';\r\nimport GoalFormModal from '../goals/FormModal';\r\n\r\nconst initialState = {\r\n      distinctExpenses: [],\r\n      totalMonthlyChangePrediction: 0,\r\n      totalPerMonth: [],\r\n      variationPerMonth: [],\r\n      averageVariationPerMonth: 0,\r\n      totalPerNextMonthsPredictions: [],\r\n      totalPerMonthRevenues: [],\r\n      variationPerMonthRevenues: [],\r\n      averageVariationPerMonthRevenues: 0,\r\n      totalPerNextMonthsPredictionsRevenues: []\r\n};\r\n\r\nclass ProjectionsChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = \r\n    {\r\n      distinctExpenses: [],\r\n      totalMonthlyChangePrediction: 0,\r\n      totalPerMonth: [],\r\n      variationPerMonth: [],\r\n      averageVariationPerMonth: 0,\r\n      totalPerNextMonthsPredictions: [],\r\n      totalPerMonthRevenues: [],\r\n      variationPerMonthRevenues: [],\r\n      averageVariationPerMonthRevenues: 0,\r\n      totalPerNextMonthsPredictionsRevenues: []\r\n    }\r\n    };\r\n\r\n  reset() {\r\n    this.state.distinctExpenses = [];\r\n    this.state.totalPerMonth = [];\r\n    this.state.variationPerMonth = [];\r\n    this.state.totalPerNextMonthsPredictions = [];\r\n    this.state.totalPerMonthRevenues = [];\r\n    this.state.variationPerMonthRevenues = [];\r\n    this.state.totalPerNextMonthsPredictionsRevenues = [];\r\n    this.state.totalMonthlyChangePrediction = 0;\r\n    this.state.averageVariationPerMonth = 0;\r\n    this.state.averageVariationPerMonthRevenues = 0;\r\n  }\r\n\r\n  getTotalMonthlyAmount() {\r\n    for (let i = 0; i < this.props.studiedMonths; i++)\r\n    {\r\n      this.state.totalPerMonth[i] = 0;\r\n      for (let expense of this.props.expenses) {\r\n        var d = new Date(expense.paid_at);\r\n        var currentTime = new Date();\r\n        if (d.getMonth() == (currentTime.getMonth() - 1 - i))\r\n        {\r\n          this.state.totalPerMonth[i] += (expense.amount / 100);\r\n        }\r\n        if((currentTime.getMonth() - 1 - i) < 0)\r\n        {\r\n          if ((d.getMonth() == (currentTime.getMonth() - 1 - i + 12)) && (d.getFullYear() != currentTime.getFullYear()))\r\n          {\r\n            this.state.totalPerMonth[i] += (expense.amount / 100);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getAverageVariationPerMonth() {\r\n    for (let i = this.state.totalPerMonth.length - 2; i > -1; i--) {\r\n      this.state.variationPerMonth[i] = (this.state.totalPerMonth[i] - this.state.totalPerMonth[i + 1]);\r\n    }\r\n    const sum = this.state.variationPerMonth.reduce((partialSum, a) => partialSum + a, 0);\r\n    this.state.averageVariationPerMonth = sum / this.state.variationPerMonth.length;\r\n  }\r\n\r\n\r\n  getTotalExpensesProjections() {\r\n    for (let i = 0; i < this.props.projectedMonths; i++)\r\n    {\r\n      if (i == 0)\r\n      {\r\n        this.state.totalPerNextMonthsPredictions[i] = this.state.totalPerMonth[0] + this.state.averageVariationPerMonth;\r\n      }\r\n      else\r\n      {\r\n        this.state.totalPerNextMonthsPredictions[i] = this.state.totalPerNextMonthsPredictions[i - 1] + this.state.averageVariationPerMonth;\r\n      }\r\n    }\r\n  }\r\n\r\n  getTotalMonthlyAmountRevenues() {\r\n    for (let i = 0; i < this.props.studiedMonths; i++)\r\n    {\r\n      this.state.totalPerMonthRevenues[i] = 0;\r\n      for (let revenue of this.props.revenues) {\r\n        console.log(revenue.description)\r\n        var d = new Date(revenue.paid_at);\r\n        var currentTime = new Date();\r\n        if (d.getMonth() == (currentTime.getMonth() - 1 - i))\r\n        {\r\n          this.state.totalPerMonthRevenues[i] += (revenue.amount / 100);\r\n        }\r\n        if((currentTime.getMonth() - 1 - i) < 0)\r\n        {\r\n          if ((d.getMonth() == (currentTime.getMonth() - 1 - i + 12)) && (d.getFullYear() != currentTime.getFullYear()))\r\n          {\r\n            this.state.totalPerMonthRevenues[i] += (revenue.amount / 100);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getAverageVariationPerMonthRevenues() {\r\n    for (let i = this.state.totalPerMonthRevenues.length - 2; i > -1; i--) {\r\n      this.state.variationPerMonthRevenues[i] = (this.state.totalPerMonthRevenues[i] - this.state.totalPerMonthRevenues[i + 1]);\r\n    }\r\n    const sum = this.state.variationPerMonthRevenues.reduce((partialSum, a) => partialSum + a, 0);\r\n    this.state.averageVariationPerMonthRevenues = sum / this.state.variationPerMonthRevenues.length;\r\n  }\r\n\r\n\r\n  getTotalRevenuesProjections() {\r\n    for (let i = 0; i < this.props.projectedMonths; i++)\r\n    {\r\n      if (i == 0)\r\n      {\r\n        this.state.totalPerNextMonthsPredictionsRevenues[i] = this.state.totalPerMonthRevenues[0] + this.state.averageVariationPerMonthRevenues;\r\n      }\r\n      else\r\n      {\r\n        this.state.totalPerNextMonthsPredictionsRevenues[i] = this.state.totalPerNextMonthsPredictionsRevenues[i - 1] + this.state.averageVariationPerMonthRevenues;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    this.reset();\r\n    this.getTotalMonthlyAmount();\r\n    this.getAverageVariationPerMonth();\r\n    this.getTotalExpensesProjections();\r\n    this.getTotalMonthlyAmountRevenues();\r\n    this.getAverageVariationPerMonthRevenues();\r\n    this.getTotalRevenuesProjections();\r\n    //console.log(this.props.studiedMonths);\r\n    //console.log(this.props.projectedMonths);\r\n    const d = new Date();\r\n    var thisYear = d.getFullYear().toString();\r\n    var lastYear = (d.getFullYear() - 1).toString();\r\n    var nextYear = (d.getFullYear() + 1).toString();\r\n\r\n    const monthNames = [\"January \" + thisYear, \"February \" + thisYear,\"March \" + thisYear, \"April \" + thisYear,\r\n    \"May \" + thisYear, \"June \" + thisYear, \"July \" + thisYear, \"August \" + thisYear,\r\n    \"September \" + thisYear, \"October \" + thisYear, \"November \"  + thisYear, \"December \" + thisYear,\r\n    \"January \"  + nextYear, \"February \"  + nextYear, \"March \"  + nextYear, \"April \"  + nextYear,\r\n    \"May \"  + nextYear, \"June \"  + nextYear, \"July \"  + nextYear, \"August \"  + nextYear,\r\n     \"September \"  + nextYear, \"October \"  + nextYear, \"November \"  + nextYear, \"December \"  + nextYear\r\n      ];\r\n      monthNames[-1] = \"December \"  + lastYear\r\n      monthNames[-2] = \"November \" + lastYear\r\n      monthNames[-3] = \"October \" + lastYear\r\n      monthNames[-4] = \"September \" + lastYear\r\n      monthNames[-5] = \"August \" + lastYear\r\n      monthNames[-6] = \"July \" + lastYear\r\n      monthNames[-7] = \"June \" + lastYear\r\n      monthNames[-8] = \"May \" + lastYear\r\n      monthNames[-9] = \"April \" + lastYear\r\n      monthNames[-10] = \"March \" + lastYear\r\n      monthNames[-11] = \"February \" + lastYear\r\n      monthNames[-12] = \"January \" + lastYear\r\n    return (\r\n    <div>\r\n      <h2>Expenses</h2>\r\n      <br></br>\r\n      <br></br>\r\n\r\n      <h3>Total expenses of the previous months</h3>\r\n      <br></br>\r\n      <div className='overflow-x bg-gray p-10 table-borders'>\r\n      <table className='table'>\r\n        <thead>\r\n        <tr>\r\n          <th>Month</th>\r\n          <th>Total expenses</th>\r\n          <th>Difference from last month</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {this.state.totalPerMonth.map((value, index) => \r\n      (\r\n        <tr>\r\n          <td>{monthNames[(d.getMonth() - index - 1)]}</td>\r\n          <td>{value.toFixed(2)}$</td>\r\n          {index + 1 != this.state.totalPerMonth.length && this.state.variationPerMonth[index] < 0 &&\r\n        <td className='green-text'>{this.state.variationPerMonth[index].toFixed(2)}$</td>}\r\n        {index + 1 != this.state.totalPerMonth.length && this.state.variationPerMonth[index] > 0 &&\r\n          <td className='red-text'>+{this.state.variationPerMonth[index].toFixed(2)}$</td>\r\n      }\r\n      {index + 1 != this.state.totalPerMonth.length && this.state.variationPerMonth[index] == 0 &&\r\n          <td>{this.state.variationPerMonth[index].toFixed(2)}$</td>\r\n      }\r\n        </tr>))}\r\n        </tbody>\r\n      </table>\r\n      </div>\r\n      <br></br>\r\n      <br></br>\r\n        \r\n      {this.state.averageVariationPerMonth < 0 &&\r\n        <h3>Average variation per month : <span className='green-text'>{this.state.averageVariationPerMonth.toFixed(2)}$</span></h3>}\r\n        {this.state.averageVariationPerMonth > 0 &&\r\n          <h3>Average variation per month : <span className='red-text'>+{this.state.averageVariationPerMonth.toFixed(2)}$</span></h3>\r\n      }\r\n      {this.state.averageVariationPerMonth == 0 &&\r\n          <h3>Average variation per month : <span>{this.state.averageVariationPerMonth.toFixed(2)}$</span></h3>\r\n      }\r\n\r\n      <br></br>\r\n      <br></br>\r\n\r\n      <h3>Projection of the total expenses for the upcoming months</h3>\r\n      <br></br>\r\n      <div className='overflow-x bg-gray p-10 table-borders'>\r\n      <table className='table'>\r\n        <thead>\r\n        <tr>\r\n          <th>Month</th>\r\n          <th>Total expenses</th>\r\n          <th>Difference from last month</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        {this.state.totalPerNextMonthsPredictions.map((value, index) => \r\n      (\r\n        <tr>\r\n          <td>{monthNames[(d.getMonth() + index)]}</td>\r\n          <td>{value.toFixed(2)}$</td>\r\n          {this.state.averageVariationPerMonth < 0 &&\r\n        <td className='green-text'>{this.state.averageVariationPerMonth.toFixed(2)}$</td>}\r\n        {this.state.averageVariationPerMonth > 0 &&\r\n          <td className='red-text'>+{this.state.averageVariationPerMonth.toFixed(2)}$</td>\r\n      }\r\n      {this.state.averageVariationPerMonth == 0 &&\r\n          <td>{this.state.averageVariationPerMonth.toFixed(2)}$</td>\r\n      }\r\n        </tr>))}\r\n        </tbody>\r\n      </table>\r\n      </div>\r\n<br></br>\r\n<br></br>\r\n<h2>Revenues</h2>\r\n      <br></br>\r\n      <br></br>\r\n      <h3>Total revenues of the previous months</h3>\r\n      <br></br>\r\n<div className='overflow-x bg-gray p-10 table-borders'>\r\n<table className='table'>\r\n  <thead>\r\n  <tr>\r\n    <th>Month</th>\r\n    <th>Total revenues</th>\r\n    <th>Difference from last month</th>\r\n  </tr>\r\n  </thead>\r\n  <tbody>\r\n  {this.state.totalPerMonthRevenues.map((value, index) => \r\n(\r\n  <tr>\r\n    <td>{monthNames[(d.getMonth() - index - 1)]}</td>\r\n    <td>{value.toFixed(2)}$</td>\r\n    {index + 1 != this.state.totalPerMonthRevenues.length && this.state.variationPerMonthRevenues[index] < 0 &&\r\n  <td className='red-text'>{this.state.variationPerMonthRevenues[index].toFixed(2)}$</td>}\r\n  {index + 1 != this.state.totalPerMonthRevenues.length && this.state.variationPerMonthRevenues[index] > 0 &&\r\n    <td className='green-text'>+{this.state.variationPerMonthRevenues[index].toFixed(2)}$</td>\r\n}\r\n{index + 1 != this.state.totalPerMonthRevenues.length && this.state.variationPerMonthRevenues[index] == 0 &&\r\n    <td>{this.state.variationPerMonthRevenues[index].toFixed(2)}$</td>\r\n}\r\n  </tr>))}\r\n  </tbody>\r\n</table>\r\n</div>\r\n<br></br>\r\n<br></br>\r\n  \r\n{this.state.averageVariationPerMonthRevenues < 0 &&\r\n  <h3>Average variation per month : <span className='red-text'>{this.state.averageVariationPerMonthRevenues.toFixed(2)}$</span></h3>}\r\n  {this.state.averageVariationPerMonthRevenues > 0 &&\r\n    <h3>Average variation per month : <span className='green-text'>+{this.state.averageVariationPerMonthRevenues.toFixed(2)}$</span></h3>\r\n}\r\n{this.state.averageVariationPerMonthRevenues == 0 &&\r\n    <h3>Average variation per month : <span>{this.state.averageVariationPerMonthRevenues.toFixed(2)}$</span></h3>\r\n}\r\n\r\n<br></br>\r\n<br></br>\r\n\r\n<h3>Projection of the total revenues for the upcoming months</h3>\r\n<br></br>\r\n<div className='overflow-x bg-gray p-10 table-borders'>\r\n<table className='table'>\r\n  <thead>\r\n  <tr>\r\n    <th>Month</th>\r\n    <th>Total revenues</th>\r\n    <th>Difference from last month</th>\r\n  </tr>\r\n  </thead>\r\n  <tbody>\r\n  {this.state.totalPerNextMonthsPredictionsRevenues.map((value, index) => \r\n(\r\n  <tr>\r\n    <td>{monthNames[(d.getMonth() + index)]}</td>\r\n    <td>{value.toFixed(2)}$</td>\r\n    {this.state.averageVariationPerMonthRevenues < 0 &&\r\n  <td className='red-text'>{this.state.averageVariationPerMonthRevenues.toFixed(2)}$</td>}\r\n  {this.state.averageVariationPerMonthRevenues > 0 &&\r\n    <td className='green-text'>+{this.state.averageVariationPerMonthRevenues.toFixed(2)}$</td>\r\n}\r\n{this.state.averageVariationPerMonthRevenues == 0 &&\r\n    <td>{this.state.averageVariationPerMonthRevenues.toFixed(2)}$</td>\r\n}\r\n  </tr>))}\r\n  </tbody>\r\n</table>\r\n</div>\r\n<br></br>\r\n<br></br>\r\n<br></br>\r\n<br></br>\r\n        \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectionsChart;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ProjectionsMain from '../components/projections/Main';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  ReactDOM.render(\r\n    <ProjectionsMain {...window.InitialProps} />,\r\n    document.getElementById('projections'),\r\n  );\r\n});\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAFA;AAwBA;AAAA;AAAA;AAAA;AACA;AAzBA;AAyBA;AAAA;AAAA;AAAA;AACA;AA1BA;AA2BA;AACA;AAAA;AACA;AACA;AA9BA;AAgCA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AArCA;AAuCA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AA5CA;AA8CA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAzDA;AA0EA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAjFA;AAmFA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhGA;AAkGA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AApHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAFA;AAkBA;AACA;;;AACA;AACA;AACA;AACA;AAmjLA;AACA;AAkLA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3LA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;;;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAHA;AAeiiiiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;;AAtUA;AACA;AAuUA;AACA;A;;;;;;;;;;;;;;;;;AC7VA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;A;;;;;;;;;;A","sourceRoot":""}