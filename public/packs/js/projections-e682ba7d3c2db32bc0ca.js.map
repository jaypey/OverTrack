{"version":3,"file":"js/projections-e682ba7d3c2db32bc0ca.js","sources":["webpack://ontrack/./app/javascript/components/projections/CategoriesList.jsx","webpack://ontrack/./app/javascript/components/projections/CategoryTile.jsx","webpack://ontrack/./app/javascript/components/projections/Main.jsx","webpack://ontrack/./app/javascript/components/projections/Overview.jsx","webpack://ontrack/./app/javascript/components/projections/ProjectionsChart.jsx","webpack://ontrack/./app/javascript/packs/projections.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Arr } from '../../helpers/main';\r\nimport CategoryTile from './CategoryTile';\r\nimport CategoryFormModal from '../categories/FormModal';\r\n\r\nclass CategoriesList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showCategoryCreateModal: false };\r\n  }\r\n\r\n  openCategoryCreate = () => { this.setState({ showCategoryCreateModal: true }); }\r\n  closeCategoryCreate = () => { this.setState({ showCategoryCreateModal: false }); }\r\n  onCategorySave = () => {\r\n    this.closeCategoryCreate();\r\n    this.props.onChange();\r\n  }\r\n\r\n  colorsToSkip() {\r\n    return this.props.categoriesWithExpensesAndSpend.map((cat) => cat.color);\r\n  }\r\n\r\n  chunkedCategories() {\r\n    const categoriesAndAddButton = this.props.categoriesWithExpensesAndSpend.concat('addButton');\r\n    return Arr.chunk(categoriesAndAddButton, 2);\r\n  }\r\n\r\n  renderCategoryCreateModal() {\r\n    if (!this.state.showCategoryCreateModal) { return ''; }\r\n    return <CategoryFormModal colorsToSkip={this.colorsToSkip()} onClose={this.closeCategoryCreate} onSave={this.onCategorySave} />;\r\n  }\r\n\r\n  renderCategory(category, idx) {\r\n    let markup = '';\r\n    if (category == 'addButton') {\r\n      markup = (\r\n        <div className=\"category-tile dim-til-hover hover-pointer no-border\" onClick={this.openCategoryCreate}>\r\n          <div className=\"new\">+ Add a category</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      markup = (\r\n        <CategoryTile\r\n          categoryWithExpensesAndSpend={category}\r\n          colorsToSkip={this.colorsToSkip()}\r\n          onChange={this.props.onChange}\r\n        />\r\n      );\r\n    }\r\n\r\n    return <div className=\"six columns\" key={idx}>{markup}</div>;\r\n  }\r\n\r\n  renderRow(listChunk, idx) {\r\n    return (\r\n      <div className=\"row\" key={idx}>\r\n        {listChunk.map((category, i) => this.renderCategory(category, i))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.renderCategoryCreateModal()}\r\n        {this.chunkedCategories().map((listChunk, idx) => this.renderRow(listChunk, idx))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCategoriesList.defaultProps = {\r\n  categoriesWithExpensesAndSpend: [],\r\n};\r\n\r\nCategoriesList.propTypes = {\r\n  categoriesWithExpensesAndSpend: PropTypes.array,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CategoriesList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Numerics } from '../../helpers/main';\r\nimport CategoryFormModal from '../categories/FormModal';\r\n\r\nclass CategoryTile extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showCategoryEditModal: false };\r\n  }\r\n\r\n  openCategoryEdit = () => { this.setState({ showCategoryEditModal: true }); }\r\n  closeCategoryEdit = () => { this.setState({ showCategoryEditModal: false }); }\r\n  onCategorySave = () => {\r\n    this.closeCategoryEdit();\r\n    this.props.onChange();\r\n  }\r\n  onExpenseSave = () => {\r\n    this.closeExpenseCreate();\r\n    this.props.onChange();\r\n  }\r\n\r\n  goalDiff() {\r\n    if (!this.props.categoryWithExpensesAndSpend.monthly_goal) { return 0; }\r\n    return this.props.categoryWithExpensesAndSpend.monthly_goal - this.props.categoryWithExpensesAndSpend.spend;\r\n  }\r\n\r\n  goalComparisonDisplay() {\r\n    if (!this.props.categoryWithExpensesAndSpend.monthly_goal) { return 'No goal set'; }\r\n\r\n    const diff = this.goalDiff();\r\n    return (diff >= 0) ? `${Numerics.centsToDollars(diff)} remaining` : `${Numerics.centsToDollars(Math.abs(diff))} over`;\r\n  }\r\n\r\n  normalizedPercentage() {\r\n    if (!this.props.categoryWithExpensesAndSpend.monthly_goal) { return 0; }\r\n    return Math.min(100, this.props.categoryWithExpensesAndSpend.spend / this.props.categoryWithExpensesAndSpend.monthly_goal * 100);\r\n  }\r\n\r\n  renderCategoryEditModal() {\r\n    if (!this.state.showCategoryEditModal) { return ''; }\r\n    return (\r\n      <CategoryFormModal\r\n        onClose={this.closeCategoryEdit}\r\n        onSave={this.onCategorySave}\r\n        category={this.props.categoryWithExpensesAndSpend}\r\n        colorsToSkip={this.props.colorsToSkip}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const category = this.props.categoryWithExpensesAndSpend;\r\n    return (\r\n      <>\r\n        <div\r\n          className=\"category-tile flex flex-space-between tint-on-hover hover-pointer\"\r\n          style={{ borderColor: category.color }}\r\n          onClick={this.openCategoryEdit}\r\n        >\r\n          <h3>{category.name}</h3>\r\n\r\n          <div className=\"text-right\">\r\n            <h2 className={category.spend > 0 ? '' : 'text-muted'}>{Numerics.centsToDollars(category.spend)}</h2>\r\n            <div className={this.goalDiff() < 0 ? 'text-warning' : 'text-muted'}>\r\n              {this.goalDiff() < 0 && (\r\n                <i className=\"fas fa-exclamation-circle mr-4\" />\r\n              )}\r\n              {this.goalComparisonDisplay()}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {this.renderCategoryEditModal()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nCategoryTile.defaultProps = {\r\n  categoryWithExpensesAndSpend: {},\r\n  colorsToSkip: [],\r\n};\r\n\r\nCategoryTile.propTypes = {\r\n  categoryWithExpensesAndSpend: PropTypes.object,\r\n  colorsToSkip: PropTypes.array,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CategoryTile;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport Overview from './Overview';\r\nimport CategoriesList from './CategoriesList';\r\nimport ExpenseFormModal from '../expenses/FormModal';\r\nimport PieChart from '../shared/PieChart';\r\nimport { Categories, Revenues, Expenses, Goals, Reports } from '../../api/main';\r\nimport { Alerts } from '../../helpers/main';\r\nimport ProjectionsChart from './ProjectionsChart';\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      categories: [],\r\n      expenses: [],\r\n      expensesWithPredictions: [],\r\n      sumExpenses: 0,\r\n      revenues: [],\r\n      sumRevenues: 0,\r\n      loaded: false,\r\n      monthlyGoal: 0,\r\n      showExpenseCreateModal: false,\r\n      data: [],\r\n      labels: [],\r\n      colors: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.reloadData();\r\n  }\r\n\r\n  openExpenseCreate = () => { this.setState({ showExpenseCreateModal: true }); }\r\n  closeExpenseCreate = () => { this.setState({ showExpenseCreateModal: false }); }\r\n  onExpenseSave = () => {\r\n    this.closeExpenseCreate();\r\n    this.reloadData();\r\n  }\r\n\r\n  reloadData = () => {\r\n    this.loadCategory();\r\n    this.loadExpensesData();\r\n    this.loadRevenueData();\r\n    this.loadPieChartData(moment().format('MMMM YYYY'));\r\n  }\r\n\r\n  loadCategory = () => {\r\n    Categories.list().then(\r\n      (cResp) => { this.setState({ categories: cResp }); },\r\n      () => { Alerts.error(\"Categories didn't load correctly\"); }\r\n    );\r\n  }\r\n\r\n  loadExpensesData = () => {\r\n    Expenses.list({ paid_after: moment().startOf('month').unix() }).then(\r\n      (eResp) => {\r\n        this.setState({ expenses: eResp });\r\n        Goals.list().then(\r\n          (gResp) => { this.setState({ loaded: true, monthlyGoal: gResp.monthly }); },\r\n          () => { Alerts.error(\"Goal of expenses didn't load!\"); },\r\n        );\r\n      },\r\n      () => { Alerts.error(\"Expenses didn't load correctly!\"); },\r\n    );\r\n  }\r\n\r\n  categoriesWithExpensesAndSpend() {\r\n    const categories = [];\r\n    this.state.categories.forEach((category) => {\r\n      category.expenses = this.state.expenses.filter((expense) => expense.category_id == category.id);\r\n      category.spend = category.expenses.reduce((sum, exp) => sum + exp.amount, 0);\r\n      categories.push(category);\r\n    });\r\n    return categories;\r\n  }\r\n\r\n  renderExpenseCreateModal() {\r\n    if (!this.state.showExpenseCreateModal) { return ''; }\r\n    return <ExpenseFormModal categories={this.state.categories} onClose={this.closeExpenseCreate} onSave={this.onExpenseSave} />;\r\n  }\r\n\r\n  loadRevenueData = () => {\r\n    Revenues.list({ paid_after: moment().startOf('month').unix() }).then(\r\n      (rResp) => {\r\n        this.setState({ revenues: rResp});\r\n      },\r\n      () => { Alerts.error(\"Revenues didn't load correctly!\") }\r\n    );\r\n  }\r\n\r\n  loadSum = () => {\r\n    var indexRev = 0;\r\n\r\n    this.state.categories.forEach((category) => {\r\n      if (category.is_revenue == 1) {\r\n        category.revenues = this.state.revenues.filter((revenue) => revenue.category_id == category.id);\r\n        category.revenues.forEach((revenue) => {\r\n          indexRev += revenue.amount;\r\n        });\r\n      }\r\n    });\r\n\r\n    return (indexRev/100);\r\n  }\r\n\r\n  loadPieChartData = (month) => {\r\n    Reports.month({ month }).then(\r\n      (resp) => {\r\n\r\n        const revenue = this.loadSum();\r\n        \r\n        const data = resp.category_pourcentage.map((r) => \r\n          Number.parseFloat((r.spend/revenue)*100).toFixed(3)\r\n        )\r\n        const labels = resp.category_pourcentage.map((r) => r.category)\r\n        const colors = resp.category_pourcentage.map((r) => r.color)\r\n\r\n        this.setState({ data: data });\r\n        this.setState({ labels: labels });\r\n        this.setState({ colors: colors });\r\n\r\n        return true;\r\n      },\r\n      () => { Alerts.error(\"The data for the pie chart didn't load correctly!\") }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    // if (!this.state.loaded) { return ''; }\r\n\r\n    return (\r\n      <div>\r\n        {/* {this.state.expenses.map((expense) =>\r\n                        (<p key={expense.id}>\r\n                            {expense.description}\r\n                        </p>))} */}\r\n      {<ProjectionsChart str=\"ca fonctionne\" categoriesWithExpensesAndSpend={this.categoriesWithExpensesAndSpend()} testprops={this.state.expenses} /> }\r\n      </div>\r\n      // <div>\r\n      //   {this.renderExpenseCreateModal()}\r\n      //   <div className=\"container\">\r\n      //     <Overview categoriesWithExpensesAndSpend={this.categoriesWithExpensesAndSpend()} monthlyGoal={this.state.monthlyGoal} onChange={this.reloadData} />\r\n      //   </div>\r\n\r\n      //   <div className=\"container mt-100\">\r\n      //     <div className=\"chart-container-short\">\r\n      //       <PieChart labels={this.state.labels} data={this.state.data} colors={this.state.colors} />\r\n      //     </div>\r\n      //   </div>\r\n\r\n      //   <div className=\"bg-art mt-150\">\r\n      //     <div className=\"container\">\r\n      //       <button className=\"btn btn-round btn-dark pos-abs mt-neg-20 z-5\" onClick={this.openExpenseCreate}>+ add an expense</button>\r\n      //     </div>\r\n      //     <div className=\"container pv-100 mh-350\">\r\n      //       <CategoriesList categoriesWithExpensesAndSpend={this.categoriesWithExpensesAndSpend()} onChange={this.reloadData} />\r\n      //     </div>\r\n      //   </div>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport { Numerics } from '../../helpers/main';\r\nimport Progress from '../shared/Progress';\r\nimport GoalFormModal from '../goals/FormModal';\r\n\r\nclass Overview extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showGoalModal: false };\r\n  }\r\n\r\n  openGoal = () => { this.setState({ showGoalModal: true }); }\r\n  closeGoal = () => { this.setState({ showGoalModal: false }); }\r\n  onGoalSave = () => {\r\n    this.closeGoal();\r\n    this.props.onChange();\r\n  }\r\n\r\n  goalDiff() {\r\n    if (!this.props.monthlyGoal) { return 0; }\r\n    return this.props.monthlyGoal - this.totalSpend();\r\n  }\r\n\r\n  totalSpend() {\r\n    return this.props.categoriesWithExpensesAndSpend.reduce((sum, cat) => sum + cat.spend, 0);\r\n  }\r\n\r\n  percentages() {\r\n    const outOf = Math.max(this.props.monthlyGoal, this.totalSpend());\r\n    return this.props.categoriesWithExpensesAndSpend.map((category) => ({ percentage: (category.spend / outOf) * 100, color: category.color }));\r\n  }\r\n\r\n  goalComparisonDisplay() {\r\n    const diff = this.goalDiff();\r\n    return (diff >= 0) ? `${Numerics.centsToDollars(diff)} remaining` : `${Numerics.centsToDollars(Math.abs(diff))} over`;\r\n  }\r\n\r\n  renderGoalModal() {\r\n    if (!this.state.showGoalModal) { return ''; }\r\n    return <GoalFormModal onClose={this.closeGoal} onSave={this.onGoalSave} goals={{ monthly: this.props.monthlyGoal }} />;\r\n  }\r\n\r\n  render() {\r\n    const today = moment();\r\n    const daysLeftInMonth = moment().endOf('month').diff(today, 'days');\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"mb-10\">{today.format('MMMM')} ({daysLeftInMonth} days left)</div>\r\n\r\n        <div className=\"flex row-flex flex-space-between flex-baseline mb-10\">\r\n          <div><h1>{Numerics.centsToDollars(this.totalSpend())}</h1></div>\r\n          {!this.props.monthlyGoal && (\r\n            <a href={null} onClick={this.openGoal} className=\"dim-til-hover\">Set a monthly goal</a>\r\n          )}\r\n          {!!this.props.monthlyGoal && (\r\n            <div className=\"flex flex-baseline\">\r\n              <div className={this.goalDiff() < 0 ? 'text-warning mr-4' : 'text-muted mr-4'}>\r\n                {this.goalDiff() < 0 && (\r\n                  <i className=\"fas fa-exclamation-circle mr-4\" />\r\n                )}\r\n                {this.goalComparisonDisplay()}\r\n              </div>\r\n              <i className=\"far fa-edit dim-til-hover hover-pointer text-muted\" onClick={this.openGoal} />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <Progress data={this.percentages()} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nOverview.defaultProps = {\r\n  categoriesWithExpensesAndSpend: [],\r\n  monthlyGoal: 0,\r\n};\r\n\r\nOverview.propTypes = {\r\n  categoriesWithExpensesAndSpend: PropTypes.array,\r\n  monthlyGoal: PropTypes.number,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Overview;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\nimport { Numerics } from '../../helpers/main';\r\nimport Progress from '../shared/Progress';\r\nimport GoalFormModal from '../goals/FormModal';\r\n\r\nclass ProjectionsChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      expensestest: [],\r\n      expenseslastmonth: []\r\n    };\r\n  }\r\n\r\n  getexpense() {\r\n    {this.props.categoriesWithExpensesAndSpend.map(category => {\r\n      category.expenses.map(expense =>  {\r\n        // if (expense.description == \"Breakfast\")\r\n        // {\r\n          // this.setState(prevState => ({\r\n          //   expensestest: [...prevState.expensestest, expense]\r\n          // }))\r\n          console.log(expense.id)\r\n        // }\r\n      }\r\n      )\r\n    })}\r\n  }\r\n\r\n  getcategories() {\r\n    {this.props.categoriesWithExpensesAndSpend.map((category) =>\r\n      (console.log(category.name)))}\r\n\r\n\r\n  //   for (let expensesss of this.props.categoriesWithExpensesAndSpend) {\r\n  //     if (expensesss.name == \"T-Shirt sales\")\r\n  //     {\r\n  //       console.log(expensesss.name)\r\n  //     }\r\n  // }\r\n  }\r\n\r\n  getexpenseslastmonth() {\r\n    // {this.props.categoriesWithExpensesAndSpend.map((category) =>\r\n    //   (category.expenses.map((expense) => {\r\n    //     const currentMonth = new Date().getMonth() + 1;\r\n    //     const paidMonth = new Date(expense.created_at);\r\n    //     console.log(expense.created_at);\r\n    //     console.log(currentMonth);\r\n    //     console.log(paidMonth);\r\n    //     console.log(expense.description);\r\n    //     //console.log(typeof expense.paid_at);\r\n    //     // if (expense.paid_at.getMonth() == 9)\r\n    //     // {\r\n    //     //   console.log(expense.description)\r\n    //     // //expenseslastmonth.push(expense);\r\n    //     // }\r\n    // })))}\r\n\r\n    {this.props.testprops.map((expense) =>\r\n      {console.log(expense.created_at)})}\r\n\r\n  }\r\n\r\n  render() {\r\n    this.getexpenseslastmonth();\r\n    return (\r\n    <div>\r\n        <h3>Hello test {this.props.str}</h3>\r\n        {this.props.categoriesWithExpensesAndSpend.map((category) =>\r\n                        (<p key={category.id}>\r\n                            {category.name}\r\n                        </p>))}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ProjectionsChart.defaultProps = {\r\n//   str: \"test\",\r\n// };\r\n\r\n// ProjectionsChart.propTypes = {\r\n//   str: PropTypes.string,\r\n// };\r\n\r\nexport default ProjectionsChart;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ProjectionsMain from '../components/projections/Main';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  ReactDOM.render(\r\n    <ProjectionsMain {...window.InitialProps} />,\r\n    document.getElementById('projections'),\r\n  );\r\n});\r\n"],"mappings":"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","sourceRoot":""}