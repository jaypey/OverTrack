{"version":3,"file":"js/app_javascript_components_goals_FormModal_jsx-app_javascript_components_shared_BarChart_jsx-a-86ecc0-c09ada5b0c7c76d3845e.js","sources":["webpack://ontrack/./app/javascript/components/goals/FormModal.jsx","webpack://ontrack/./app/javascript/components/shared/BarChart.jsx","webpack://ontrack/./app/javascript/components/shared/CurrencyInput.jsx","webpack://ontrack/./app/javascript/components/shared/Modal.jsx","webpack://ontrack/./app/javascript/components/shared/Progress.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Modal from '../shared/Modal';\r\nimport CurrencyInput from '../shared/CurrencyInput';\r\nimport { Goals } from '../../api/main';\r\nimport { Alerts } from '../../helpers/main';\r\n\r\nclass FormModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      goal: this.props.goals.monthly || 0,\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  handleGoalChange = (num) => { this.setState({ goal: num }); }\r\n  handleErrors = (key, errs) => { this.setState({ errors: Object.assign(this.state.errors, { [key]: errs }) }); }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (Object.values(this.state.errors).flat().length) { return; }\r\n\r\n    Goals.update({ monthly_goal: this.state.goal }).then(\r\n      (resp) => { this.props.onSave(resp); },\r\n      () => { Alerts.genericError(); },\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Modal title=\"Edit Goal\" onClose={this.props.onClose}>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"row\">\r\n            <div className=\"input-group\">\r\n              <label>Total Monthly Goal</label>\r\n              <CurrencyInput initialValue={this.state.goal} onChange={this.handleGoalChange} />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"form-actions\">\r\n            <button type=\"submit\" className=\"btn btn-dark\">Save</button>\r\n          </div>\r\n        </form>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nFormModal.defaultProps = {\r\n  goals: {\r\n    monthly: 0,\r\n  },\r\n};\r\n\r\nFormModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  onSave: PropTypes.func.isRequired,\r\n  goals: PropTypes.object,\r\n};\r\n\r\nexport default FormModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Numerics } from '../../helpers/main';\r\nimport Chart from 'chart.js';\r\n\r\nconst toggleCategory = function (_, legendItem) {\r\n  const index = legendItem.datasetIndex;\r\n  const ci = this.chart;\r\n  const alreadyHidden = (ci.getDatasetMeta(index).hidden === null) ? false : ci.getDatasetMeta(index).hidden;\r\n\r\n  ci.data.datasets.forEach(function (e, i) {\r\n    const meta = ci.getDatasetMeta(i);\r\n\r\n    if (i !== index) {\r\n      if (!alreadyHidden) {\r\n        meta.hidden = meta.hidden === null ? !meta.hidden : null;\r\n      } else if (meta.hidden === null) {\r\n        meta.hidden = true;\r\n      }\r\n    }\r\n\r\n    if (i === index) {\r\n      meta.hidden = null;\r\n    }\r\n  });\r\n\r\n  ci.update();\r\n};\r\n\r\nconst BarChart = ({ data, labels, hideLegend, stacked }) => {\r\n  const [randomId] = useState(Math.random().toString());\r\n  const [instance, setInstance] = useState(null);\r\n\r\n  Chart.defaults.global.animation.duration = 100;\r\n  Chart.defaults.scale.ticks.padding = 10;\r\n\r\n  useEffect(() => {\r\n    instance?.destroy();\r\n\r\n    const config = {\r\n      type: 'bar',\r\n      data: {\r\n        datasets: data,\r\n        labels,\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n          display: !hideLegend,\r\n          onClick: toggleCategory,\r\n          position: 'bottom',\r\n        },\r\n        tooltips: {\r\n          callbacks: {\r\n            label: t => `${data[t.datasetIndex].label}: $${Numerics.commify(parseFloat(t.yLabel).toFixed(2))}`,\r\n          },\r\n        },\r\n        scales: {\r\n          yAxes: [{\r\n            stacked,\r\n            ticks: {\r\n              callback: label => `$${Numerics.commify(label)}`,\r\n            },\r\n          }],\r\n          xAxes: [{ stacked }],\r\n        },\r\n      },\r\n    };\r\n\r\n    const newInstance = new Chart(document.getElementById(randomId), config);\r\n\r\n    setInstance(newInstance);\r\n  }, [data, labels]);\r\n\r\n  return <canvas id={randomId} />;\r\n};\r\n\r\nBarChart.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  labels: PropTypes.array.isRequired,\r\n  hideLegend: PropTypes.bool,\r\n  stacked: PropTypes.bool,\r\n};\r\n\r\nBarChart.defaultProps = {\r\n  hideLegend: false,\r\n  stacked: false,\r\n};\r\n\r\nexport default BarChart;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport MaskedInput from 'react-text-mask';\r\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask';\r\n\r\nclass CurrencyInput extends React.Component {\r\n  handleChange = (e) => {\r\n    if (!this.props.onChange) { return; }\r\n    const num = e.target.value.replace(/\\$|,/g, '');\r\n    const cents = parseInt(parseFloat(num).toFixed(2).replace(/\\./g, ''));\r\n    const normalized = isNaN(cents) ? 0 : cents;\r\n    this.props.onChange(normalized);\r\n  }\r\n\r\n  handleBlur = (e) => {\r\n    if (!this.props.onBlur) { return; }\r\n    const num = e.target.value.replace(/\\$|,/g, '');\r\n    const cents = parseInt(parseFloat(num).toFixed(2).replace(/\\./g, ''));\r\n    const normalized = isNaN(cents) ? 0 : cents;\r\n    this.props.onBlur(normalized);\r\n  }\r\n\r\n  render() {\r\n    const defaultMaskOptions = {\r\n      prefix: '$',\r\n      includeThousandsSeparator: true,\r\n      thousandsSeparatorSymbol: ',',\r\n      allowDecimal: true,\r\n      decimalSymbol: '.',\r\n      decimalLimit: 2,\r\n      integerLimit: 7,\r\n      allowLeadingZeroes: false,\r\n      allowNegative: this.props.allowNegative,\r\n    };\r\n    const currencyMask = createNumberMask(defaultMaskOptions);\r\n\r\n    return (\r\n      <MaskedInput\r\n        placeholder=\"$0.00\"\r\n        inputMode=\"decimal\"\r\n        mask={currencyMask}\r\n        onBlur={this.handleBlur}\r\n        onChange={this.handleChange}\r\n        defaultValue={this.props.initialValue ? (this.props.initialValue / 100).toFixed(2) : ''}\r\n        className={this.props.className}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nCurrencyInput.defaultProps = {\r\n  initialValue: 0,\r\n  allowNegative: false,\r\n  className: '',\r\n  onBlur: null,\r\n  onChange: null,\r\n};\r\n\r\nCurrencyInput.propTypes = {\r\n  initialValue: PropTypes.number,\r\n  allowNegative: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n  onBlur: PropTypes.func,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default CurrencyInput;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Modal extends React.Component {\r\n  componentDidMount() {\r\n    document.body.className += ' modal-open';\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const openModals = document.querySelectorAll('.modal').length;\r\n    if (openModals == 1) {\r\n      document.body.className = document.body.className.replace('modal-open', '');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"modal-mask modal\">\r\n        <div className=\"modal-wrapper\">\r\n          <div className=\"modal-container\">\r\n            <div className=\"modal-header\">\r\n              <h3>{this.props.title}</h3>\r\n\r\n              <a className=\"close\" onClick={this.props.onClose}>\r\n                <i className=\"fa fa-times\" />\r\n              </a>\r\n            </div>\r\n\r\n            <div className=\"modal-body\">\r\n              {this.props.children}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nModal.defaultProps = {\r\n  title: '',\r\n};\r\n\r\nModal.propTypes = {\r\n  title: PropTypes.string,\r\n  onClose: PropTypes.func.isRequired,\r\n  children: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Progress extends React.Component {\r\n  renderData(value, idx) {\r\n    if (value.percentage <= 0) { return ''; }\r\n\r\n    return (\r\n      <div className=\"progress\" key={idx} style={{ width: `${value.percentage}%`, backgroundColor: value.color ? value.color : '#565656' }} />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"progress-bar\">\r\n        {this.props.data.map((value, idx) => this.renderData(value, idx))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProgress.defaultProps = {\r\n  data: [],\r\n};\r\n\r\nProgress.propTypes = {\r\n  data: PropTypes.array,\r\n};\r\n\r\nexport default Progress;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAFA;AAQA;AAAA;AAAA;AAAA;AACA;AATA;AASA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAVA;AAWA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAjBA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AAavCA;AACA;AAwCA;AACA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAFA;AAMA;AAAA;AAAA;AAPA;AAbA;AANA;AA+BA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;AA3CA;AACA;AA4CA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;A;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AACA;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;;AAjCA;AACA;AAkCA;AACA;AADA;AAIA;AACA;AACA;AACA;AAHA;AAMA;AACA;A;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;;AAhBA;AACA;AAiBA;AACA;AADA;AAIA;AACA;AADA;AAIA;AACA;A;;A","sourceRoot":""}