{"version":3,"file":"js/insights-521b432d55dd33eafa0b.js","sources":["webpack://ontrack/./app/javascript/components/insights/Main.jsx","webpack://ontrack/./app/javascript/components/insights/Month.jsx","webpack://ontrack/./app/javascript/components/insights/PieChart.jsx","webpack://ontrack/./app/javascript/components/insights/Year.jsx","webpack://ontrack/./app/javascript/components/shared/BarChart.jsx","webpack://ontrack/./app/javascript/packs/insights.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Year from './Year';\nimport Month from './Month';\n\nconst Main = ({ hasData, availableYears, availableMonths }) => {\n  if (!hasData) {\n    return (\n      <div className=\"container text-center\">\n        <h3>No data available!</h3>\n        <p>Add expenses to start seeing reports here.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"container\">\n        <Year availableYears={availableYears} />\n      </div>\n      <div className=\"bg-gray mt-100\">\n        <div className=\"container pv-100\">\n          <Month availableMonths={availableMonths} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMain.propTypes = {\n  availableYears: PropTypes.array.isRequired,\n  availableMonths: PropTypes.array.isRequired,\n  hasData: PropTypes.bool.isRequired,\n};\n\nexport default Main;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport BarChart from '../shared/BarChart';\nimport { Reports } from '../../api/main';\nimport { Alerts } from '../../helpers/main';\nimport { Numerics } from '../../helpers/main';\n\nconst Month = ({ availableMonths }) => {\n  const [month, setMonth] = useState(availableMonths[availableMonths.length - 1]);\n  const [goal, setGoal] = useState(0);\n  const [spend, setSpend] = useState(0);\n  const [chartdata, setChartdata] = useState({ data: [], labels: [] });\n\n  const handleMonthDecrement = () => setMonth(availableMonths[availableMonths.indexOf(month) - 1]);\n  const handleMonthIncrement = () => setMonth(availableMonths[availableMonths.indexOf(month) + 1]);\n\n  useEffect(() => {\n    Reports.month({ month }).then(\n      (resp) => {\n        const labels = resp.category_totals.map((r) => r.category);\n        const datasets = [\n          { label: 'Spend', backgroundColor: '#8295e0', data: [] },\n        ];\n\n        resp.category_totals.forEach((r) => {\n          datasets[0].data.push(r.spend / 100);\n        });\n\n        setChartdata({ data: datasets, labels });\n        setGoal(resp.monthly_goal);\n        setSpend(resp.total);\n      },\n      () => { Alerts.genericError(); },\n    );\n  }, [month]);\n\n  const goalComparison = parseFloat(spend) - parseFloat(goal);\n\n  return (\n    <div>\n      <div className=\"text-center\">\n        <button className=\"btn btn-transparent\" onClick={handleMonthDecrement} disabled={availableMonths.indexOf(month) == 0}>\n          <i className=\"fa fa-chevron-left mr-10\" />\n        </button>\n        <span className=\"d-inline-block mw-150 text-center\">{month}</span>\n        <button className=\"btn btn-transparent\" onClick={handleMonthIncrement} disabled={availableMonths.indexOf(month) == availableMonths.length - 1}>\n          <i className=\"fa fa-chevron-right ml-10\" />\n        </button>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"six columns\">\n          <div className=\"month flex flex-space-between\">\n            <b>Total spend</b>\n            <h2>\n              {Numerics.centsToDollars(spend)}\n            </h2>\n          </div>\n        </div>\n        <div className=\"six columns\">\n          {!goal && (\n            <a className=\"month flex flex-space-between\" href=\"/\">\n              <div className=\"text-muted\">Set a total monthly goal</div>\n              <h2 className=\"v-hidden\">N/A</h2>\n            </a>\n          )}\n          {!!goal && (\n            <div className=\"month flex flex-space-between\">\n              <b>Goal comparison</b>\n              <h2 className={goalComparison <= 0 ? 'text-success' : 'text-warning'}>\n                {Numerics.centsToDollars(Math.abs(goalComparison))}\n                {goalComparison >= 0 ? ' over' : ' under'}\n              </h2>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"month\">\n        <div className=\"mb-30\">\n          <b>Spend by category</b>\n        </div>\n        <div className=\"chart-container\">\n          <BarChart data={chartdata.data} labels={chartdata.labels} hideLegend />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nMonth.propTypes = {\n  availableMonths: PropTypes.array.isRequired,\n};\n\nexport default Month;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Chart from 'chart.js';\n\nconst PieChart = ({ data, labels, colors }) => {\n  const [randomId] = useState(Math.random().toString());\n  const [instance, setInstance] = useState(null);\n\n  useEffect(() => {\n    instance?.destroy();\n\n    const config = {\n      type: 'pie',\n      data: {\n        datasets: [{ data, backgroundColor: colors }],\n        labels,\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        legend: {\n          display: false,\n        },\n        tooltips: {\n          callbacks: {\n            label: t => `${labels[t.index]}: ${data[t.index]}%`,\n          },\n        },\n      },\n    };\n\n    const newInstance = new Chart(document.getElementById(randomId), config);\n\n    setInstance(newInstance);\n  }, [data, labels]);\n\n  return <canvas id={randomId} />;\n};\n\nPieChart.propTypes = {\n  data: PropTypes.array.isRequired,\n  labels: PropTypes.array.isRequired,\n  colors: PropTypes.array.isRequired,\n};\n\nexport default PieChart;\n","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport BarChart from '../shared/BarChart';\nimport PieChart from './PieChart';\nimport { Reports } from '../../api/main';\nimport { Alerts } from '../../helpers/main';\nimport { Numerics } from '../../helpers/main';\n\nconst Year = ({ availableYears }) => {\n  const [year, setYear] = useState(availableYears[0]);\n  const [yearTotal, setYearTotal] = useState(0);\n  const [categoryTotals, setCategoryTotals] = useState([]);\n  const [categoryAverages, setCategoryAverages] = useState([]);\n  const [averageRange, setAverageRange] = useState([]);\n  const barChartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const [barChartData, setBarChartData] = useState([]);\n  const [pieChartData, setPieChartData] = useState({\n    data: [],\n    colors: [],\n    labels: [],\n  });\n\n  const handleYearChange = e => setYear(e.target.value);\n\n  useEffect(() => {\n    Reports.year({ year }).then(\n      (resp) => {\n        const barChartDatasets = resp.categories.map((c) => {\n          const dataPoints = barChartLabels.map((mon) => {\n            const amount = resp.category_amounts_by_month.find((a) => a.month == mon && a.category == c.name)?.amount;\n            return Numerics.centsToFloat(amount || 0);\n          });\n          return { label: c.name, data: dataPoints, backgroundColor: c.color };\n        });\n\n        const pieChartDatasets = [];\n        const pieChartLabels = [];\n        const pieChartColors = [];\n        resp.categories.forEach((c) => {\n          pieChartLabels.push(c.name);\n          pieChartColors.push(c.color);\n          const percentage = resp.category_percentages.find((p) => p.category === c.name)?.percentage;\n          pieChartDatasets.push(Numerics.floatToPercent(percentage || 0));\n        });\n\n        setBarChartData(barChartDatasets);\n        setPieChartData({ data: pieChartDatasets, colors: pieChartColors, labels: pieChartLabels });\n        setCategoryTotals(resp.category_totals);\n        setCategoryAverages(resp.category_averages_for_year.averages);\n        setAverageRange([resp.category_averages_for_year.start_date, resp.category_averages_for_year.end_date]);\n        setYearTotal(resp.total);\n      },\n      () => { Alerts.genericError(); },\n    );\n  }, [year]);\n\n  return (\n    <div>\n      <div className=\"flex flex-space-between mb-30\">\n        <div className=\"input-group inline\">\n          <select value={year} onChange={handleYearChange}>\n            {availableYears.map(yr => <option key={yr} value={yr}>{yr}</option>)}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"chart-container\">\n        <BarChart\n          data={barChartData}\n          labels={barChartLabels}\n          hideLegend\n          stacked\n        />\n      </div>\n\n      <div className=\"row row-flex flex mt-100\">\n        <div className=\"six columns\">\n          <div className=\"chart-container\">\n            <PieChart data={pieChartData.data} labels={pieChartData.labels} colors={pieChartData.colors} />\n          </div>\n        </div>\n\n        <div className=\"totals six columns mt-50-sm\">\n          <table>\n            <thead>\n              <tr>\n                <td className='grey'>Category</td>\n                <td className='grey'>\n                  Total\n                  <br />\n                  <span className=\"text-small\">\n                    (All of {year})\n                  </span>\n                </td>\n                <td className='grey'>\n                  Average\n                  <br />\n                  <span className=\"text-small\">\n                    ({moment(averageRange[0]).format('M/D')} - {moment(averageRange[1]).format('M/D')})\n                  </span>\n                </td>\n              </tr>\n            </thead>\n            <tbody>\n              {categoryTotals.map(t => (\n                <tr key={t.category} >\n                  <td>\n                    <span className=\"color-tile\" style={{ backgroundColor: t.color }} />\n                    {t.category}\n                  </td>\n                  <td>{Numerics.centsToDollars(t.amount)}</td>\n                  <td>{Numerics.centsToDollars(categoryAverages.find(a => t.category === a.category)?.amount || 0)}</td>\n                </tr>\n              ))}\n\n              <tr>\n                <td>All</td>\n                <td>{Numerics.centsToDollars(yearTotal)}</td>\n                <td>{Numerics.centsToDollars(categoryAverages.find(a => a.category === 'All')?.amount || 0)}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nYear.propTypes = {\n  availableYears: PropTypes.array.isRequired,\n};\n\nexport default Year;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Numerics } from '../../helpers/main';\nimport Chart from 'chart.js';\n\nconst toggleCategory = function (_, legendItem) {\n  const index = legendItem.datasetIndex;\n  const ci = this.chart;\n  const alreadyHidden = (ci.getDatasetMeta(index).hidden === null) ? false : ci.getDatasetMeta(index).hidden;\n\n  ci.data.datasets.forEach(function (e, i) {\n    const meta = ci.getDatasetMeta(i);\n\n    if (i !== index) {\n      if (!alreadyHidden) {\n        meta.hidden = meta.hidden === null ? !meta.hidden : null;\n      } else if (meta.hidden === null) {\n        meta.hidden = true;\n      }\n    }\n\n    if (i === index) {\n      meta.hidden = null;\n    }\n  });\n\n  ci.update();\n};\n\nconst BarChart = ({ data, labels, hideLegend, stacked }) => {\n  const [randomId] = useState(Math.random().toString());\n  const [instance, setInstance] = useState(null);\n\n  Chart.defaults.global.animation.duration = 100;\n  Chart.defaults.scale.ticks.padding = 10;\n\n  useEffect(() => {\n    instance?.destroy();\n\n    const config = {\n      type: 'bar',\n      data: {\n        datasets: data,\n        labels,\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        legend: {\n          display: !hideLegend,\n          onClick: toggleCategory,\n          position: 'bottom',\n        },\n        tooltips: {\n          callbacks: {\n            label: t => `${data[t.datasetIndex].label}: $${Numerics.commify(parseFloat(t.yLabel).toFixed(2))}`,\n          },\n        },\n        scales: {\n          yAxes: [{\n            stacked,\n            ticks: {\n              callback: label => `$${Numerics.commify(label)}`,\n            },\n          }],\n          xAxes: [{ stacked }],\n        },\n      },\n    };\n\n    const newInstance = new Chart(document.getElementById(randomId), config);\n\n    setInstance(newInstance);\n  }, [data, labels]);\n\n  return <canvas id={randomId} />;\n};\n\nBarChart.propTypes = {\n  data: PropTypes.array.isRequired,\n  labels: PropTypes.array.isRequired,\n  hideLegend: PropTypes.bool,\n  stacked: PropTypes.bool,\n};\n\nBarChart.defaultProps = {\n  hideLegend: false,\n  stacked: false,\n};\n\nexport default BarChart;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport InsightsMain from '../components/insights/Main';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  ReactDOM.render(\n    <InsightsMain {...window.InitialProps} />,\n    document.getElementById('insights'),\n  );\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AADA;AADA;AANA;AANA;AAoBA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AADA;AAIA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAFA;AAMA;AAAA;AAAA;AAPA;AAbA;AANA;AA+BA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;AACA;A;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;A;;;;;;;;;;A","sourceRoot":""}