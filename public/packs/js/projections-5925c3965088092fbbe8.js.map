{"version":3,"file":"js/projections-5925c3965088092fbbe8.js","sources":["webpack://ontrack/./app/javascript/components/projections/Main.jsx","webpack://ontrack/./app/javascript/components/projections/Month.jsx","webpack://ontrack/./app/javascript/components/projections/PieChart.jsx","webpack://ontrack/./app/javascript/components/projections/Year.jsx","webpack://ontrack/./app/javascript/components/shared/BarChart.jsx","webpack://ontrack/./app/javascript/packs/projections.jsx"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Year from './Year';\r\nimport Month from './Month';\r\nimport { Categories, Revenues, Expenses, Goals, Reports } from '../../api/main';\r\n\r\nclass Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      expenses: [],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.loaded) { return ''; }\r\n\r\n    return (\r\n      <div>\r\n      <div className=\"container\">\r\n        <Year availableYears={availableYears} />\r\n      </div>\r\n      <div className=\"bg-gray mt-100\">\r\n        <div className=\"container pv-100\">\r\n          <Month availableMonths={availableMonths} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const Main = ({ hasData, availableYears, availableMonths }) => {\r\n//   if (!hasData) {\r\n//     return (\r\n//       <div className=\"container text-center\">\r\n//         <h3>No data available!</h3>\r\n//         <p>Add expenses to start seeing reports here.</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"container\">\r\n//         <Year availableYears={availableYears} />\r\n//       </div>\r\n//       <div className=\"bg-gray mt-100\">\r\n//         <div className=\"container pv-100\">\r\n//           <Month availableMonths={availableMonths} />\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nMain.propTypes = {\r\n  availableYears: PropTypes.array.isRequired,\r\n  availableMonths: PropTypes.array.isRequired,\r\n  hasData: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Main;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BarChart from '../shared/BarChart';\r\nimport { Reports } from '../../api/main';\r\nimport { Alerts } from '../../helpers/main';\r\nimport { Numerics } from '../../helpers/main';\r\n\r\nconst Month = ({ availableMonths }) => {\r\n  const [month, setMonth] = useState(availableMonths[availableMonths.length - 1]);\r\n  const [goal, setGoal] = useState(0);\r\n  const [spend, setSpend] = useState(0);\r\n  const [chartdata, setChartdata] = useState({ data: [], labels: [] });\r\n\r\n  const handleMonthDecrement = () => setMonth(availableMonths[availableMonths.indexOf(month) - 1]);\r\n  const handleMonthIncrement = () => setMonth(availableMonths[availableMonths.indexOf(month) + 1]);\r\n\r\n  useEffect(() => {\r\n    Reports.month({ month }).then(\r\n      (resp) => {\r\n        const labels = resp.category_totals.map((r) => r.category);\r\n        const datasets = [\r\n          { label: 'Spend', backgroundColor: '#8295e0', data: [] },\r\n        ];\r\n\r\n        resp.category_totals.forEach((r) => {\r\n          datasets[0].data.push(r.spend / 100);\r\n        });\r\n\r\n        setChartdata({ data: datasets, labels });\r\n        setGoal(resp.monthly_goal);\r\n        setSpend(resp.total);\r\n      },\r\n      () => { Alerts.genericError(); },\r\n    );\r\n  }, [month]);\r\n\r\n  const goalComparison = parseFloat(spend) - parseFloat(goal);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"text-center\">\r\n        <button className=\"btn btn-transparent\" onClick={handleMonthDecrement} disabled={availableMonths.indexOf(month) == 0}>\r\n          <i className=\"fa fa-chevron-left mr-10\" />\r\n        </button>\r\n        <span className=\"d-inline-block mw-150 text-center\">{month}</span>\r\n        <button className=\"btn btn-transparent\" onClick={handleMonthIncrement} disabled={availableMonths.indexOf(month) == availableMonths.length - 1}>\r\n          <i className=\"fa fa-chevron-right ml-10\" />\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"six columns\">\r\n          <div className=\"month flex flex-space-between\">\r\n            <b>Total spend</b>\r\n            <h2>\r\n              {Numerics.centsToDollars(spend)}\r\n            </h2>\r\n          </div>\r\n        </div>\r\n        <div className=\"six columns\">\r\n          {!goal && (\r\n            <a className=\"month flex flex-space-between\" href=\"/\">\r\n              <div className=\"text-muted\">Set a total monthly goal</div>\r\n              <h2 className=\"v-hidden\">N/A</h2>\r\n            </a>\r\n          )}\r\n          {!!goal && (\r\n            <div className=\"month flex flex-space-between\">\r\n              <b>Goal comparison</b>\r\n              <h2 className={goalComparison <= 0 ? 'text-success' : 'text-warning'}>\r\n                {Numerics.centsToDollars(Math.abs(goalComparison))}\r\n                {goalComparison >= 0 ? ' over' : ' under'}\r\n              </h2>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"month\">\r\n        <div className=\"mb-30\">\r\n          <b>Spend by category</b>\r\n        </div>\r\n        <div className=\"chart-container\">\r\n          <BarChart data={chartdata.data} labels={chartdata.labels} hideLegend />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMonth.propTypes = {\r\n  availableMonths: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Month;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Chart from 'chart.js';\r\n\r\nconst PieChart = ({ data, labels, colors }) => {\r\n  const [randomId] = useState(Math.random().toString());\r\n  const [instance, setInstance] = useState(null);\r\n\r\n  useEffect(() => {\r\n    instance?.destroy();\r\n\r\n    const config = {\r\n      type: 'pie',\r\n      data: {\r\n        datasets: [{ data, backgroundColor: colors }],\r\n        labels,\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n          display: false,\r\n        },\r\n        tooltips: {\r\n          callbacks: {\r\n            label: t => `${labels[t.index]}: ${data[t.index]}%`,\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    const newInstance = new Chart(document.getElementById(randomId), config);\r\n\r\n    setInstance(newInstance);\r\n  }, [data, labels]);\r\n\r\n  return <canvas id={randomId} />;\r\n};\r\n\r\nPieChart.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  labels: PropTypes.array.isRequired,\r\n  colors: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default PieChart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport BarChart from '../shared/BarChart';\r\nimport PieChart from './PieChart';\r\nimport { Reports } from '../../api/main';\r\nimport { Alerts } from '../../helpers/main';\r\nimport { Numerics } from '../../helpers/main';\r\n\r\nconst Year = ({ availableYears }) => {\r\n  const [year, setYear] = useState(availableYears[0]);\r\n  const [yearTotal, setYearTotal] = useState(0);\r\n  const [categoryTotals, setCategoryTotals] = useState([]);\r\n  const [categoryAverages, setCategoryAverages] = useState([]);\r\n  const [averageRange, setAverageRange] = useState([]);\r\n  const barChartLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n  const [barChartData, setBarChartData] = useState([]);\r\n  const [pieChartData, setPieChartData] = useState({\r\n    data: [],\r\n    colors: [],\r\n    labels: [],\r\n  });\r\n\r\n  const handleYearChange = e => setYear(e.target.value);\r\n\r\n  useEffect(() => {\r\n    Reports.year({ year }).then(\r\n      (resp) => {\r\n        const barChartDatasets = resp.categories.map((c) => {\r\n          const dataPoints = barChartLabels.map((mon) => {\r\n            const amount = resp.category_amounts_by_month.find((a) => a.month == mon && a.category == c.name)?.amount;\r\n            return Numerics.centsToFloat(amount || 0);\r\n          });\r\n          return { label: c.name, data: dataPoints, backgroundColor: c.color };\r\n        });\r\n\r\n        const pieChartDatasets = [];\r\n        const pieChartLabels = [];\r\n        const pieChartColors = [];\r\n        resp.categories.forEach((c) => {\r\n          pieChartLabels.push(c.name);\r\n          pieChartColors.push(c.color);\r\n          const percentage = resp.category_percentages.find((p) => p.category === c.name)?.percentage;\r\n          pieChartDatasets.push(Numerics.floatToPercent(percentage || 0));\r\n        });\r\n\r\n        setBarChartData(barChartDatasets);\r\n        setPieChartData({ data: pieChartDatasets, colors: pieChartColors, labels: pieChartLabels });\r\n        setCategoryTotals(resp.category_totals);\r\n        setCategoryAverages(resp.category_averages_for_year.averages);\r\n        setAverageRange([resp.category_averages_for_year.start_date, resp.category_averages_for_year.end_date]);\r\n        setYearTotal(resp.total);\r\n      },\r\n      () => { Alerts.genericError(); },\r\n    );\r\n  }, [year]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"flex flex-space-between mb-30\">\r\n        <div className=\"input-group inline\">\r\n          <select value={year} onChange={handleYearChange}>\r\n            {availableYears.map(yr => <option key={yr} value={yr}>{yr}</option>)}\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"chart-container\">\r\n        <BarChart\r\n          data={barChartData}\r\n          labels={barChartLabels}\r\n          hideLegend\r\n          stacked\r\n        />\r\n      </div>\r\n\r\n      <div className=\"row row-flex flex mt-100\">\r\n        <div className=\"six columns\">\r\n          <div className=\"chart-container\">\r\n            <PieChart data={pieChartData.data} labels={pieChartData.labels} colors={pieChartData.colors} />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"totals six columns mt-50-sm\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <td className='grey'>Category</td>\r\n                <td className='grey'>\r\n                  Total\r\n                  <br />\r\n                  <span className=\"text-small\">\r\n                    (All of {year})\r\n                  </span>\r\n                </td>\r\n                <td className='grey'>\r\n                  Average\r\n                  <br />\r\n                  <span className=\"text-small\">\r\n                    ({moment(averageRange[0]).format('M/D')} - {moment(averageRange[1]).format('M/D')})\r\n                  </span>\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {categoryTotals.map(t => (\r\n                <tr key={t.category} >\r\n                  <td>\r\n                    <span className=\"color-tile\" style={{ backgroundColor: t.color }} />\r\n                    {t.category}\r\n                  </td>\r\n                  <td>{Numerics.centsToDollars(t.amount)}</td>\r\n                  <td>{Numerics.centsToDollars(categoryAverages.find(a => t.category === a.category)?.amount || 0)}</td>\r\n                </tr>\r\n              ))}\r\n\r\n              <tr>\r\n                <td>All</td>\r\n                <td>{Numerics.centsToDollars(yearTotal)}</td>\r\n                <td>{Numerics.centsToDollars(categoryAverages.find(a => a.category === 'All')?.amount || 0)}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nYear.propTypes = {\r\n  availableYears: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Year;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Numerics } from '../../helpers/main';\r\nimport Chart from 'chart.js';\r\n\r\nconst toggleCategory = function (_, legendItem) {\r\n  const index = legendItem.datasetIndex;\r\n  const ci = this.chart;\r\n  const alreadyHidden = (ci.getDatasetMeta(index).hidden === null) ? false : ci.getDatasetMeta(index).hidden;\r\n\r\n  ci.data.datasets.forEach(function (e, i) {\r\n    const meta = ci.getDatasetMeta(i);\r\n\r\n    if (i !== index) {\r\n      if (!alreadyHidden) {\r\n        meta.hidden = meta.hidden === null ? !meta.hidden : null;\r\n      } else if (meta.hidden === null) {\r\n        meta.hidden = true;\r\n      }\r\n    }\r\n\r\n    if (i === index) {\r\n      meta.hidden = null;\r\n    }\r\n  });\r\n\r\n  ci.update();\r\n};\r\n\r\nconst BarChart = ({ data, labels, hideLegend, stacked }) => {\r\n  const [randomId] = useState(Math.random().toString());\r\n  const [instance, setInstance] = useState(null);\r\n\r\n  Chart.defaults.global.animation.duration = 100;\r\n  Chart.defaults.scale.ticks.padding = 10;\r\n\r\n  useEffect(() => {\r\n    instance?.destroy();\r\n\r\n    const config = {\r\n      type: 'bar',\r\n      data: {\r\n        datasets: data,\r\n        labels,\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n          display: !hideLegend,\r\n          onClick: toggleCategory,\r\n          position: 'bottom',\r\n        },\r\n        tooltips: {\r\n          callbacks: {\r\n            label: t => `${data[t.datasetIndex].label}: $${Numerics.commify(parseFloat(t.yLabel).toFixed(2))}`,\r\n          },\r\n        },\r\n        scales: {\r\n          yAxes: [{\r\n            stacked,\r\n            ticks: {\r\n              callback: label => `$${Numerics.commify(label)}`,\r\n            },\r\n          }],\r\n          xAxes: [{ stacked }],\r\n        },\r\n      },\r\n    };\r\n\r\n    const newInstance = new Chart(document.getElementById(randomId), config);\r\n\r\n    setInstance(newInstance);\r\n  }, [data, labels]);\r\n\r\n  return <canvas id={randomId} />;\r\n};\r\n\r\nBarChart.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  labels: PropTypes.array.isRequired,\r\n  hideLegend: PropTypes.bool,\r\n  stacked: PropTypes.bool,\r\n};\r\n\r\nBarChart.defaultProps = {\r\n  hideLegend: false,\r\n  stacked: false,\r\n};\r\n\r\nexport default BarChart;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ProjectionsMain from '../components/projections/Main';\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  ReactDOM.render(\r\n    <ProjectionsMain {...window.InitialProps} />,\r\n    document.getElementById('projections'),\r\n  );\r\n});\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;AAxBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AADA;AADA;AANA;AANA;AAoBA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AADA;AAIA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAFA;AAMA;AAAA;AAAA;AAPA;AAbA;AANA;AA+BA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;AACA;A;;;;;;;;;;;;;;;;;AC3FA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;A;;;;;;;;;;A","sourceRoot":""}